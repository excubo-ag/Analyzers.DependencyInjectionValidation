//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DependencyInjectionValidation {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DependencyInjectionValidation.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A service extension should add all required interfaces for the exposed class. In some cases, it makes sense to ignore a particular dependency, e.g. when it is configured by the user elsewhere (for example: ILogger&lt;T&gt;). In that case, add the attribute IgnoreDependency(params Type[]) to the service extension (e.g. [IgnoreDependency(typeof(ILogger&lt;MyClass&gt;))])..
        /// </summary>
        internal static string MissingDependencyAnalyzerDescription {
            get {
                return ResourceManager.GetString("MissingDependencyAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service extension is not adding all required interfaces for {0}. Missing interface: {1}..
        /// </summary>
        internal static string MissingDependencyAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("MissingDependencyAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incomplete service extension.
        /// </summary>
        internal static string MissingDependencyAnalyzerTitle {
            get {
                return ResourceManager.GetString("MissingDependencyAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A dependency is missing, which means it is unlikely that the program will function correctly. Add the dependency by using either the corresponding service extension, or by adding it with the AddScoped, AddSingleton, or AddTransient methods. If the dependency is added by an extension method that does not communicate which interfaces it exposes (e.g. third party libraries), add the Injects attribute to the DependencyInjectionPoint method. E.g. 
        ///[DependencyInjectionPoint]
        ///[Injects(typeof(ILogger&lt;&gt;))]
        ///public [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MissingDependencyInApplicationDescription {
            get {
                return ResourceManager.GetString("MissingDependencyInApplicationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dependency {0} of {1} is missing..
        /// </summary>
        internal static string MissingDependencyInApplicationMessageFormat {
            get {
                return ResourceManager.GetString("MissingDependencyInApplicationMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing dependency.
        /// </summary>
        internal static string MissingDependencyInApplicationTitle {
            get {
                return ResourceManager.GetString("MissingDependencyInApplicationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each class in a class library that is intended for dependency injection should have a corresponding service extension.
        ///E.g.
        ///public static class ServiceExtensions
        ///{
        ///   [Exposes(typeof(MyService)), As(typeof(IMyService))]
        ///   public static IServiceCollection AddMyService(this IServiceCollection services)
        ///   {
        ///       return services.AddSingleton&lt;IMyService, MyService&gt;();
        ///   }
        ///}
        ///
        ///If you get this warning in project that is not a class library, consider marking the method that initializes your service c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MissingServiceExtensionAnalyzerDescription {
            get {
                return ResourceManager.GetString("MissingServiceExtensionAnalyzerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing service extension for class {0}..
        /// </summary>
        internal static string MissingServiceExtensionAnalyzerMessageFormat {
            get {
                return ResourceManager.GetString("MissingServiceExtensionAnalyzerMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing service extension.
        /// </summary>
        internal static string MissingServiceExtensionAnalyzerTitle {
            get {
                return ResourceManager.GetString("MissingServiceExtensionAnalyzerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any given class should only be exposed with a service extension once, to avoid confusion of the user..
        /// </summary>
        internal static string TooManyServiceExtensionsDescription {
            get {
                return ResourceManager.GetString("TooManyServiceExtensionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many service extensions for class {0}. Candidates are: {1}..
        /// </summary>
        internal static string TooManyServiceExtensionsMessageFormat {
            get {
                return ResourceManager.GetString("TooManyServiceExtensionsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many service extensions.
        /// </summary>
        internal static string TooManyServiceExtensionsTitle {
            get {
                return ResourceManager.GetString("TooManyServiceExtensionsTitle", resourceCulture);
            }
        }
    }
}
